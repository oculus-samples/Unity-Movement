{
  "api/Oculus.Movement.Utils.AddComponentsHelper.html": {
    "href": "api/Oculus.Movement.Utils.AddComponentsHelper.html",
    "title": "Class AddComponentsHelper | Unity-Movement Documentation",
    "keywords": "Class AddComponentsHelper Has functions that allow adding components via the editor or runtime. These functions detect if they are being called in the editor and if so, affect the undo state. Inheritance System.Object AddComponentsHelper Namespace : Oculus.Movement.Utils Assembly : cs.temp.dll.dll Syntax public class AddComponentsHelper Fields _MOVEMENT_SAMPLES_MENU Prefix for movement samples one-click menus. Declaration public const string _MOVEMENT_SAMPLES_MENU = \"GameObject/Movement SDK/\" Field Value Type Description System.String Methods EnsureFaceDriverComponent(GameObject, FaceRetargeterComponent, Boolean, RigType) Declaration public static void EnsureFaceDriverComponent(GameObject parentObject, FaceRetargeterComponent faceRetargeter, bool runtimeInvocation, RigType rigType) Parameters Type Name Description GameObject parentObject FaceRetargeterComponent faceRetargeter System.Boolean runtimeInvocation RigType rigType SetUpCharacterForA2EARKitFace(GameObject, Boolean, Boolean) Sets up an ARKit character for A2E face tracking. Declaration public static void SetUpCharacterForA2EARKitFace(GameObject gameObject, bool allowDuplicates = true, bool runtimeInvocation = false) Parameters Type Name Description GameObject gameObject GameObject to add to. System.Boolean allowDuplicates Allow duplicates mapping or not. System.Boolean runtimeInvocation If activated from runtime code. We want to possibly support one-click during playmode, so we can't necessarily use Application.isPlaying. SetUpCharacterForA2EFace(GameObject, Boolean, Boolean) Sets up a character for A2E face tracking. Declaration public static void SetUpCharacterForA2EFace(GameObject gameObject, bool allowDuplicates = true, bool runtimeInvocation = false) Parameters Type Name Description GameObject gameObject GameObject to add to. System.Boolean allowDuplicates Allow duplicates mapping or not. System.Boolean runtimeInvocation If activated from runtime code. We want to possibly support one-click during playmode, so we can't necessarily use Application.isPlaying. ValidateChildGameObjectsForFaceMapping(GameObject) Declaration public static void ValidateChildGameObjectsForFaceMapping(GameObject gameObject) Parameters Type Name Description GameObject gameObject"
  },
  "api/Oculus.Movement.Utils.EnumNamedArrayAttribute.html": {
    "href": "api/Oculus.Movement.Utils.EnumNamedArrayAttribute.html",
    "title": "Class EnumNamedArrayAttribute | Unity-Movement Documentation",
    "keywords": "Class EnumNamedArrayAttribute Used to label lists and arrays with an Enum instead of the default 'Element #' Inheritance System.Object EnumNamedArrayAttribute Namespace : Oculus.Movement.Utils Assembly : cs.temp.dll.dll Syntax public class EnumNamedArrayAttribute : PropertyAttribute Constructors EnumNamedArrayAttribute(Type) Used to label lists and arrays with an Enum instead of the default 'Element #' Declaration public EnumNamedArrayAttribute(Type targetEnum) Parameters Type Name Description System.Type targetEnum Which System.Enum to use as a label Fields TargetEnum System.Enum values replacing \"Element X\" when rendering lists in Unity Editor Declaration public Type TargetEnum Field Value Type Description System.Type Methods GetNames() Get cached names of enums. This method reduces memory thrash at Unity editor time Declaration public string[] GetNames() Returns Type Description System.String []"
  },
  "api/Oculus.Movement.Utils.html": {
    "href": "api/Oculus.Movement.Utils.html",
    "title": "Namespace Oculus.Movement.Utils | Unity-Movement Documentation",
    "keywords": "Namespace Oculus.Movement.Utils Classes AddComponentsHelper Has functions that allow adding components via the editor or runtime. These functions detect if they are being called in the editor and if so, affect the undo state. EnumNamedArrayAttribute Used to label lists and arrays with an Enum instead of the default 'Element #' InspectorGuiHelper Use this class in custom s to simplify insertion of Inspector warnings or feature buttons. Enums InspectorGuiHelper.OptionalIcon What kind of warning icon to show"
  },
  "api/Oculus.Movement.Utils.InspectorGuiHelper.html": {
    "href": "api/Oculus.Movement.Utils.InspectorGuiHelper.html",
    "title": "Class InspectorGuiHelper | Unity-Movement Documentation",
    "keywords": "Class InspectorGuiHelper Use this class in custom s to simplify insertion of Inspector warnings or feature buttons. Inheritance System.Object InspectorGuiHelper Namespace : Oculus.Movement.Utils Assembly : cs.temp.dll.dll Syntax public class InspectorGuiHelper Constructors InspectorGuiHelper(Func<Boolean>, Action, String, String, InspectorGuiHelper.OptionalIcon) Call DrawInInspector() to conditionally add an inspector GUI Declaration public InspectorGuiHelper(Func<bool> isRequired, Action activateHelp, string message, string button, InspectorGuiHelper.OptionalIcon icon) Parameters Type Name Description System.Func < System.Boolean > isRequired Delegate to test if this additional Inspector UI should be added System.Action activateHelp Delegate to trigger when the optional Inspector button is pressed System.String message Optional text of this additional Inspector UI System.String button Text for the button in this additional Inspector UI InspectorGuiHelper.OptionalIcon icon What kind of warning icon to show Methods DrawInInspector() Call this in the method of a custom Editor. Declaration public void DrawInInspector()"
  },
  "api/Oculus.Movement.Utils.InspectorGuiHelper.OptionalIcon.html": {
    "href": "api/Oculus.Movement.Utils.InspectorGuiHelper.OptionalIcon.html",
    "title": "Enum InspectorGuiHelper.OptionalIcon | Unity-Movement Documentation",
    "keywords": "Enum InspectorGuiHelper.OptionalIcon What kind of warning icon to show Namespace : Oculus.Movement.Utils Assembly : cs.temp.dll.dll Syntax public enum OptionalIcon Fields Name Description None Warning"
  },
  "index.html": {
    "href": "index.html",
    "title": "Unity-Movement | Unity-Movement Documentation",
    "keywords": "Unity-Movement Unity-Movement is a package that uses OpenXR’s tracking layer APIs to expose Body Tracking (BT), Eye Tracking (ET), and Face Tracking (FT) capabilities. With this package, developers can leverage tracking to populate VR environments with custom avatars that bring the expressiveness of users into the virtual environments that they create. License The Unity-Movement package is released under the Oculus License . The MIT License applies to only certain, clearly marked documents. If an individual file does not indicate which license it is subject to, then the Oculus License applies. Requirements Unity 2022.3.15f1 or newer. v77.0 or newer of the Meta XR SDK. You will need the Meta XR Core SDK and the Meta XR Interaction SDK packages found on this page . A project set up with these steps . Getting Started First, ensure that all of the requirements are met. Then, bring this package into the project. In Package Manager, click on the add button below the window title and select Add package from git URL… , using this URL: https://github.com/oculus-samples/Unity-Movement.git To grab a specific version of the package, append the version number with a # to the git URL (i.e. https://github.com/oculus-samples/Unity-Movement.git#v74.0.0 ) Alternatively, in package manager, click on the add button below the window title and select Add package from disk... , using the package.json located after unzipping one of the releases here: https://github.com/oculus-samples/Unity-Movement/releases The sample scenes are located under the Samples~/Scenes folder. For detailed information, please visit the related page . Unity Setup If the new scene or an existing scene doesn’t have a GameObject with the OVRCameraRig component, integrate body tracking as mentioned here and then follow these verification steps: From the Hierarchy tab, look for a Main Camera GameObject which comes in a new scene by default. If it it exists, then please delete it. Make sure a Camera Rig is in your scene, either by using the OVRCameraRig or by creating one using Building Blocks. To create a Camera Rig using Building Blocks, go to Meta->Tools->Building Blocks and select the (+) icon on the lower right of the Camera Rig option. Select the Camera Rig object in the Hierarchy, and in the Inspector tab, go to the OVRManager component and look for the \"Quest Features\" section. In the General tab, there are options to enable body, face, and eye tracking support. Make sure that Supported or Required is enabled for the type of tracking that you require. Under OVRManager's \"Permission Requests On Startup\" section, verify that Body, Face and Eye Tracking are enabled. Ensure that OVRManager's \"Tracking Origin Type\" is set to \"Floor Level\". In OVRManager's \"Movement Tracking\" verify that \"High\" for \"Body Tracking Fidelity\" is selected. In OVRManager's \"Movement Tracking\" verify that \"Full Body\" for \"Body Tracking Joint Set\" is selected. Layer index 10, layer index 11, and the HiddenMesh layer must be present in the project for RecalculateNormals to work correctly. You can validate project settings by navigating to Meta->Tools->Project Setup Tool . Rendering Quality Navigate to your Project Settings ( Edit->Project Settings... ) and click on the \"Quality\" section. If your project uses URP, then some of these settings might be part the rendering pipeline asset currently in use. The pipeline picked will be shown in the Quality menu. The following settings are recommended: Four bones for Skin Weights. 2x or 4x Multi Sampling Anti Aliasing. Full resolution textures. Shadow settings: Hard and soft shadows. Very high shadow resolution. Stable fit. Shadow distance of 3 meters with cascades. This will allow viewing shadows nearby without experiencing poor quality. At least one pixel light. Samples The project contains several sample scenes. To test the samples, they must be imported into the project's Assets folder: Select the \"Meta XR Movement SDK\" package in the package manager. Once selected, expand the Samples section and import the desired sample scenes. For more information about body tracking, please refer to this page . For more information about the samples, please refer to the body samples page and face samples page . Build Settings In order for the SceneSelectMenu buttons to work, add imported scenes in the Samples step to the Build Settings. Documentation The documentation for this package can be found here . The API reference for this package can be found here . License Copyright (c) Meta Platforms, Inc. and affiliates. All rights reserved. Your use of this SDK or tool is subject to the Oculus SDK License Agreement, available at https://developer.oculus.com/licenses/oculussdk/ Files from Unity and SchemingDeveloper are licensed under their respective licensing terms."
  },
  "manual/overview.html": {
    "href": "manual/overview.html",
    "title": "Overview | Unity-Movement Documentation",
    "keywords": "Overview The overview for this package can be found here ."
  },
  "manual/samples.html": {
    "href": "manual/samples.html",
    "title": "Samples | Unity-Movement Documentation",
    "keywords": "Samples The documentation for the samples in this package can be found here ."
  }
}